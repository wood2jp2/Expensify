1. Create an index.html file within a 'public' folder.
2. Ensure that 'babel-cli@6.24.1', and 'live-server' are installed globally using command 'npm install -g      [package]'
3. Hook up React using one of two ways:
    + Add the following script tags to the HTML file:
            <script src="https://unpkg.com/react@16.0.0/umd/react.development.js"></script>
            <script src="https://unpkg.com/react-dom@16.0.0/umd/react-dom.development.js"></script>
4. Run 'npm init' so that we can start tracking our node packages with a package.json file.
    + Run: 'npm install --save babel-preset-react@6.24.1 babel-preset-env@1.5.2' which turns our React code        down to ES5 code.
5. Make an 'src'
6. Run 'babel src/app.js --out-file=public/scripts/app.js --presets=env,react' so that our 'app.js' file in our scripts folder is compiled down to ES5 code for us using Babel.
    + You can add '--watch' to the end of the above command to keep a live watch and app.js file regeneration     going.
7. Running 'live-server' is used to keep the web server alive and looking / refreshing any changes made.

Re-rendering JSX on events (user data change).
    - Something like a counter (with buttons and a score display) will need to be re-rendered by ReactDOM.render in order to reflect a change of value.
    - you can initiate a component variable. 
    - Throw the ReactDOM.render() call inside of a function that gets called when:
        1. The web page is first fully loaded
        2. When a user event changes values and the code needs to be rendered to reflect the change.
        + This function will also assign (re-assign) the value(s) of the components that encase the value that changed. Call ReactDOM.render([componentThatChanged], appRoot) at the end.

Automating running babel-cli and live-server
    - Run the following to uninstall: 'npm uninstall -g live-server babel-cli'
        + AVOID Global modules.
    - Add the packages manually with 'npm install babel-cli@6.24.1 live-server'
        + This adds them to package.json
    - THEN define these scripts within the 'scripts' section in package.json (naming them whatever you like)

Adding webpack
    - Run 'npm install --save webpack@3.1.0'
    - You will have to define in the webpack.config.js file where it's entry point is (usually app.js) and where to output (bundle.js)
        + Use the path module built into node to join paths.
        + designate where the bundle.js should populate (in the public folder)
    - add the '--watch' tag to the webpack build script in package.json so that it automatically watches for changes.
        + Remember, at this point you still need live-server (npm run serve) running when you run npm run build.
    - Source Maps: 
        + Add the line 'devtool: 'cheap-module-eval-source-map'' so that it maps errors back to it's original file, and not the bundle.js.

Exporting and Importing
    - Should now be available
    - export {namedExport1, namedExport2, export3 as default} => for multiple exports
        + In the importing file, 'import export3, {namedExport1, namedExport2} from './pathToFile.js'
        + In the case of defaults, you can name them anything you want on import.
    - for singular exports: export default functionName (or React component class)
        + In the importing file, 'import functionName from './pathToFile.js'
    - All React components ideally want to live in a 'Components' folder within the src folder, each
        having their own file.

Using Babel to incorporate (convert) JSX to React  
    - run 'npm install babel-core@6.25.0 babel-loader@7.1.1 --save'
    - Then set up the module part of webpack => rules array
    - THEN you need a separate configuration file (.babelrc)
        + This will tell babel what to do using its presets.

    - Using babel plugin transform-class-properties:
        + run 'npm install --save babel-plugin-transform-class-properties'
        + Add '"plugins": ["transform-class-properties"]' to the .babelrc file.
        + This will allow you to use arrow functions on classes, which auto-binds 'this' to the particular instance of the
            component.
        + This also allows you to add defaultProps or propTypes fields as 'static' properties within the class.
        + This also allows state to be defined without being called in a constructor.

Using webpack-dev-server
    - This is a replacement for live-server and the webpack --watch that we use above, and we tell it where to look for our content using its' contentBase functionality.
        + Changes are live reloaded, speedy.
        + You can actually also TRASH the bundle.js file in the public folder. Webpack is no longer generating content based off of that file, and is serving up content from memory not writing the physical file and serving it, which can be expensive. There is NO physical bundle file associated with this.
    - Run 'npm install --save webpack-dev-server@2.5.1'
    - Add the following to the webpack.config.js file:   
        'devServer: {
            contentBase: path.join(__dirname, 'public')
        }'
    - At this point, you can go into package.json and clean out some of the scripts.
        + remove "babel"
        + add '"dev-server": "webpack-dev-server"' as a script.
        + You can now shut down the live-server and webpack --watch commands and run the npm run dev-server.

Using props.children
    + If you'd like to render a component / JSX with something inside, you can utilize the props.children call.
    + This accesses any JSX you place inside the opening and closing tags of the component.
    + <Component><p>this is a child</p></Component>
    + Within Component definition we can place {props.children} which will render the paragraph.

Incorporating Styles using SCSS
    + Add a Styles folder within the 'src' folder along with any pertinent files with a '.scss' extension
    + Add the following rule to the webpack config, which looks for any files with the scss OR css extension: 
      {
        test: /\.s?css$/,
        use: [
            'style-loader',
            'css-loader',
            'sass-loader'
        ]
      }
    + You will need a few loaders to render scss: 
        1. CSS Loader: Allows webpack to take and load in the css by converting it to a JavaScript representation of its' styles. 
        2. Style Loader: Adds CSS to the DOM by injecting a <style> tag.
        3. sass-loader: allows us to import scss files
        4. node-sass: takes SCSS code and converts to css.
    + Run: 'npm install style-loader@0.18.2 css-loader@0.28.4 sass-loader@6.0.6 node-sass@4.5.3 --save'
    + You can then import style files as you would components into the app.js file.
    + You're going to be exporting / importing styles similar to what we do with React components.
        + Create a 'base' folder within Styles folder, and a partial file called '_base.scss' which means that it only will be exporting
        + Import syntax
            At the top of each file: '@import "./path/toFile";'

SCSS Variables
    + Variables, declared at the top of the file, start with a '$' and each line ends with a ';'

    + SCSS supports nested selectors, but this should be avoided in favor of class selectors.
        + BEM: Block Element Modifier naming convention.

    + A '_settings.scss' file can also live in your 'base' folder, and hold universal variables for values used continuously (colors, spacing, etc)
        - Import at the top of the styles.scss page so that all other pages can use / inherit from.
    
    + SCSS reference functions: http://sass-lang.com/documentation/Sass/Script/Functions.html

    Modifiers are denoted with a '.baseClass--modifier' className. 
        - This is for when you have a modified version of a base class.

CSS Resets:
    + Used so that all users browsers start at the same point stylistically.
        - We can use something called normalize for this.
    + Run 'npm install --save normalize.css@7.0.0'
    + 'import normalize.css/normalize.css' goes at the top of your app.js file.

React-Router
    + Client-side rendering: much cheaper than server-side routing. There is a reach to the server for the first time that the browser has to render
        the page, but after that, all routing and rendering is done client-side.
    + Each route (endpoint) has an associated component / group of components to render once hit.
    + 'npm install --save react-router-dom@4.2.2'
    + BrowserRouter and Route should be imported. BrowserRouter is initialized once, and all pertinent routes are proclaimed inside within a <Switch>.
        - <Route> takes a path prop and a component to render when that endpoint is hit.
        - Switch moves through your <Route> tags in order, finds the match then stops (does not check later routes)
        - You can then declare your very last 404 route (no path matched) at the bottom for it to default to if no route is found
    + You'll have to add the following to the webpack config file in the devServer in order for it to default to index.html
        - 'historyApiFallback: true'
    + Make sure you add the 'exact' prop where needed so that you don't see 'stacking' of components of different endpoints on the same page

Redux: A Global State Container

    + Components have given us the illusion of reuseability even though most components rely on the props they are given to function correctly. 
        - In order to truly be able to reuse a component, the best way would be to store the state in a neutral, non-component-based state system, which is where Redux comes in.
        - Redux is also going to give state a place to stay accessible in applications where there is no central parent component to track a simple state.
    + Redux also helps avoid passing props all the way down a tree, through components that do NOT need access to those props. 

    Redux Store is just an {object}

    + Install: 'npm install --save redux@3.7.2'
    + import {createStore} from 'redux'
        - this instantiates your store.
        - createStore is also called when store.dispatch() is called
        - var store = createStore((state = { count: 0 }, actionObject) => {
            return state
        })
            + give it a default state value in the function so that it has something if not given anything at all
        - store.getState()
    + createStore: function that takes a function that gets called right away.

    Actions: 
        + allow for changing of the Redux store values
        + these are in the form of objects that get sent to the store.

        {
            type: 'ALL_CAPS_IS_CONVENTION'
        }

        NOTE: You MUST provide type, otherwise, it will throw an error.
        + Then, within the createStore() call, you create functions which return NEW state objects with the manipulated new values. NEVER change state directly or action object directly.
            - These are dispatched based on the actionObject.type function fed the switch statement of the reducer.
            - Use a switch statement to dispatch functions based off the type of redux call

REDUX: Watching for changes to the store using store.subscribe() 
    - We need to be able to watch and measure changes to do things like re-render our app.
    - store.subscribe takes a function that runs whenever the store changes.
        + it returns an unsubscribe function that can be called after any state change to stop      the subscribe function call when the state changes.

Object Destructuring
    - Object properties on an object such as the following: 
        const person = {
            name: 'Josh',
            age: 26, 
            location: {
                city: 'Arlington',
                temp: 33
            }
        }

        can be accessed like so: 
            __ const {name = 'Anon', age} = person
            __ const {temp: temperature = 'unknown'} = person.location

        which gives us a default value for the name property (Anon) if it is not found. You can rename these
        properties using the colon if needed.

ARRAY DESTRUCTURING

    ___ const address = ['123 Fake Street', 'Alexandria', 'VA', '22153']

    - You can leave the last ones off if not needed. Variasbles are aligned with array items IN ORDER.
    - You can remove the name and leave the comma if you don't need a particular array item
    - Note, that there is nothing to rename, but you can still set defaults.

    ___ const [, city, state = 'New York'] = address

Redux - Action Generators: Functions that return action objects

    - Instead of all the logic of each case being within your switch case(s), you want to break that out into functions that take a payload object in, and return an action object.
        + Remember, the action object is then ingested by the createStore method, after which the store is updated accordingly.
        + In turn, the action generator functions end up being passed into the store.dispatch functions, along with
            the payload object.
            - Ensure that the payload defaults to an empty object
        + Use object destructuring in order to access any data being passed in directly.
            - You'll need to outline defaults to these arguments in case they are NOT given.

Redux - Reducers: specify how the state of the application changes in response to actions
    - You can break out the switch statement that controls what happens to state based off the types of payload we receive, 
        to its' own reducer function.
        + Reference this function as you pass it into the createStore method.
    - This is because we will have MULTIPLE reducers.
    - Characteristics of Reducers: 
        1. They are pure functions: output is only determined by input. They do not interact with anything outside its scope.
        2. We should not change anything on state or action: simply we are returning an object that represents the new state.

    Break out default state into a separate const that is referenced if no state is given to a reducer.    

    - Combine Reducers function:
        called as first argument within createStore()
        Give combineReducers an object with the keys being the root state name(s), and the values will be their corresponding
            reducer functions.
        You'll see that state is now an object where our properties live.

    - IDs are generated by an npm package 'uuid'
    - As an aside, an action will go through BOTH reducers once combineReducers takes effect.
    - calling the uuid() function returns a unique ID we can use. 
        + Removing items (expenses) from the array becomes as easy as filtering down state to avoid that particular passed in UUID.

Spread Operators: Arrays and objects
    - Purpose: The spread operator prevents a reference to the old array or object, and returns a clone of that so as to 'keep' the old values
    - Arrays
        + Allow you to easily concatenate values and return a new array.
            var newArray = [...clonedOldArray, newValueToAdd]
    - Objects:
        + We need to install a babel plugin to allow this to work in browser.
            + RUN: 'npm install --save babel-plugin-transform-object-rest-spread@6.23.0'
            + Add to .babelrc in plugins section: 'transform-object-rest-spread'
        + var newObject = {...oldObject, anyProperty: 'string'}
            + Add any new properties wherever. 
            + If a property key appears twice, the value LAST set or in the spread operator overrides it.

* Long story short: For each individual change of state, you want to have an action that returns an object with the information you need to change the state, as well as a correlating parent reducer, which changes the state
    based off the action.type given. You will have a separate large reducer function for each tree of actions that can change state.

Folder and File Setup
    - Create folders for actions, selectors (query data from redux store such sorting), store, and reducers.
    - set up your default exports, import any libraries and files needed for these particular files.
    - From here, we can switch back to webpack running app.js, and import configureStore from the store folder in src folder.
        + Set a const store = configureStore() in app.js

Higher Order Components (HOC): components that render another component
    - Goal: To reuse code.

    Advantages

    - Render Hijacking:
    - Prop manipulation: 
    - Abstract state: 

    A higher order component looks to be similar to a functional, stateless component. It is fed a component(s) as the argument which is typically named
        'WrappedComponent'. It returns a function that takes in props and THEN returns JSX (maybe a warning or something), including the WrappedComponent(s) given. Think
        about a possible error message that may surround different fields or pages of the application. The error message is the same, but the 
        component it wraps would be different in each case. 
        + All of this will return a JSX component which is then rendered in place of the original component.
        + Props can be passed to the component being passed in using a spread operator, within the JSX being rendered by the HOC.
            - <WrappedComponent {...props} />
            - This will iterate over all props and put them on the component like normal.
        
    You can pass props to the HOC itself and use conditional rendering, or even pass it on to the main component itself.

Connecting React to Redux
    - 'npm install --save react-redux@5.0.5'
    - import { Provider } from 'react-redux'
        + Provider allows us to provide the redux store to all of the app's components. This means we don't need to manually pass around the store.
    - Since Provider is a react component, you can wrap <Provider store={store}> tags around your highest level components, which may be a router or something.
    ____ - import { connect } from 'react-redux'
        + connect is a function that connects the component to the redux store.
            - THE FUNCTION TAKES THE STATE OBJECT AS AN ARGUMENT
        + You will need to pass into connect a function, which returns an object with the properties that that particular component needs to access.
            - With the return value of that, call the function while passing in the original component needing access. This will return our ConnectedReduxComponent.
            - The information will be passed down from the Redux store, and accessible through props.
    
    - Make sure that the ConnectedReduxComponent is the one you now export as opposed to the original non-connected component
    - You can break out the function that connect takes in, into its own variable, called mapStateToProps.
        + mapStateToProps takes in state, and returns an object that has the fields that it needs to access on the store.
    
    This all looks like this: 

            import { connect } from 'react-redux'

            const ExpenseList = props => (
                <div>
                    <h1>ExpenseList</h1>
                    {props.expenses && props.expenses.map((expense, i) => <p key={i}>{i + 1}. {expense.description}</p>)}
                </div>
            )

            const mapStateToProps = state => ({
                expenses: state.expenses
            })

            const ConnectedExpenseList = connect(mapStateToProps)(ExpenseList)

            export default ConnectedExpenseList
    
    AS THE STORE CHANGES, ALL THIS RENDERING CODE WILL RE-RUN

        As components are made, depending on what they are, they will need to be connected to the store. Once again, this is done by calling the connect
            function from 'react-redux', giving it the mapStateToProps function which takes in state and returns an object with the values that it needs to access,
            and lastly calling that return value function with the original component. This will return a ConnectedComponent, with the mapStateToProps object
            passed down as props to the component. 

            - You will also have access to the dispatch function which we had access to on the store object, as this is passed as props to the component in question
                as well.  
            - Call props.dispatch() and import any action (filters in this case) so that you can change the store.
            - NOTE: Things like deleting items means that you do NOT need access to state, so you don't have to pass anything into the connect function
                nor call a mapStateToProps function
            - DON'T FORGET: As state and props are passed around, you may use Object Destructuring to siphon out the variables you explicity need.

Working with events, forms, and Dates
        ERROR: if you get the error saying that you're trying to access a synthetic event, and to use event.persist(), you are probably trying to use 
        the event value(s) in a callback which doesn't run at the same time as the event. Either use event.persist() prior, or set the values to a 
        variable.
    
    - Working with the date picker: https://github.com/airbnb/react-dates
        - 'npm install --save react-dates@12.7.0 react-addons-shallow-compare@15.6.0 moment@2.18.1'
        - Use moment for time

            import moment from 'moment'
            import { SingleDatePicker } from 'react-dates'
            import 'react-dates/lib/css/_datepicker.css'

Automatic Re-routing: 
    - Remember: At the top of the application, where you render your routes, links, etc, BrowserRouter passes down certain props to ALL children components.
        This includes things like 'location', and 'history'. Access this by 
            ____ props.history.push('/): this redirects you to the home page.

The reason why we pass up the onSubmit form function INSTEAD of adding to the Expense form is because we want to re-use ExpenseForm in the EditExpense page.

Redux DevTools extension: 
    - You have to install the extension in Chrome, AND add a line to your createStore instance as the second argument.
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()

Testing React components using Jest:
    - Released by Facebook. Similar to Jasmine or Mocha (Node) or Karma (angular) but Jest works best with React.
    - 'npm install jest@20.0.4 --save'
        + Add "test": "jest" to package.json scripts.
        + when you run 'npm test' it will look through your project for specified test files with an end of '.test.js'
    - At a high level, within the test folder, add files for each of your desired to test functions. The 'test' global takes a description of what
        you are testing, as well as a callback function. in the callback you can call the function needing testing with the appropriate values. Then`
        use the 'expect' global, provide that the result of the function call, and call 'toBe' on the result, along with what the result should be.
    - Setting up Jest in watch mode: 
        + run jest with the --watch arg.
    - toBe: always uses a triple equal ===, which will NOT work with arrays or objects. For those data types, use toEqual
    - For dynamically generated values (say, ids), use expect.any(type) to bypass a test.

    - Use 'npm test -- --watchAll' to keep a live testing connection for ALL tests.

Snapshot Testing: Testing for React Components
    - Testing pure components rather than functions is very different. 
    - You are now concerned more with what JSX renders when certain data is passed in based on props, rather than what is returned from a function.
    - We need to figure out how to virtually render component. This is where the 'react-test-renderer' package comes in.
        + npm install --save 'react-test-renderer@16.0.0' and import at the top of any react component tests.
        + import ReactShallowRenderer from 'react-test-renderer/shallow'
        + You'll also obviously need to import react AND the component being tested.
    - Shallow rendering vs. full DOM rendering
        + Shallow rendering expects ONLY the top level component to be rendered, and not child components within.
    - Snapshots allow you to track changes to data over time.
    - If a component is updated, you can update the stored snapshot saved by pressing 'u'
        + Create a new instance of ReactShallowRenderer() under the 'renderer' const
        + call render on renderer and pass in the component.
        expect(renderer.getRenderOutput()).toMatchSnapshot()

Enzyme: uses Jest, but adds onto that for more complex Testing
    - npm install --save enzyme@3.0.0 enzyme-adapter-react-16@1.0.0 raf@3.3.2
        + raf: request animations frame
    - NOW: we need to set up a setupTests.js within the tests folder, which will configure our testing suite. You need this to get enzyme working at all.
        ____ import Enzyme from 'enzyme'
             import Adapter from 'enzyme-adapter-react-16'
 
             Enzyme.configure({
                 adapter: new Adapter()
             })
    - THEN: we set up a jest.config.json
        + setupFiles needs an array of paths to files that we want to have be fed thru our setup files
    - You can now import {shallow} from enzyme for these particular tests.
    - within each, const wrapper = shallow(<ComponentTested />)
    - Now, wrapper is similar to jQuery, where it will allow you to grab certain elements based off class, id, element, etc and get properties such as text, length, and more from it to test.
    - Now we can expect the wrapper to match the snapshot.

    - npm install --save enzyme-to-json@3.0.1
        + import toJSON from 'enzyme-to-json'
        + Now we can compare the JSON-ified version of wrapper to the component
        + add the following to the JSON object in jest.config.json. This will let you not need the toJSON call
        "snapshotSerializers": [
            "enzyme-to-json/serializer"
        ]

Dynamic Components Testing: 
    - We want to test the UNCONNECTED version of the component (without the Redux store)

Simulating real events with Enzyme
    - wrapper.find('.tagNameIdClassNameEtc).simulate('eventString')
        + this can be a click or a change or a submit
    - feel free to use the snapshot function to see how state / component is rendered as data change simulation is induced within the test.
    - with events (forms, text fields that change), you will also have to pass in the EVENT object, possibly with targets and values on it.

Test spies: 
    - The point of these are to create 'fake functions' that are created by Jest for us, so that we can test and simulate, and make assertions about them.
        + We can check if it was called, how many times, which args, etc.
        + We can create the fake functions, pass them to our components, and then make sure the behavior is what we expected
    - You can access props on any JSX using wrapper.find('component).prop('propName')
        + This will return the value of the prop. If it's a function like an onChange or onSubmit function, make sure you call
            it with the pertinent value.

Redux: mapDispatchToProps  
    - can be called as a second argument to connect()
    - 'overrides' prop function values, so it returns object with any keys being the same function names as the ones we 
        need to override. you can use this to dispatch returned things to the store.

Preparing your app to deploy to production:
    - This is done using webpack for production
        + add the following script to run in production mode to your package.json
            => webpack -p --env -production
        + Switch webpack to an arrow function that takes the env value and that returns the object
            => You can check then if the env variable is equal to 'production' and build accordingly from there.
            => In devtool in webpack config, check if it is in production mode using the 'env' value, if so, 'source-map'
        + Now you'll see bundle.js.map being build which contains the external shit that should not need to be requested in browser.

Breaking out CSS into it's own file
    - Issue: currently, all of it lives within the bundle.js, which means the file is bigger than it needs to be and doing things it shouldn't be doing.
    - We need to output the styles into a separate file, and then link it within the index.html
    - We're going to use a webpack plugin to extract this: https://www.npmjs.com/package/extract-text-webpack-plugin
    - Install, require it within webpack.config, and create a new instance within the Module.exports.
        + The instance takes one argument, which is the styles file (styles.css)
    - You'll have to modify the 'use' rule to be equal to
    ____        use: CSSExtract.extract({
                    use: [
                        'css-loader',
                        'sass-loader'
                    ]
                })
    ___ Also, add the plugins array to the webpack config and add CSSExtract variable to it.
        + Plugins would change your webpack build and should include anything that should have access to it.
    - If you now run build:prod, you'll see FOUR assets being outputted by the webpack build.
        + You'll see styles.css and styles.css.map now in your public folder.
        + Make sure you link the styles.css like normal in the index.html
    - Now, styles will show up with source-maps in prod, but NOT dev. We can delete the bundles and styles files from the public folder, and run dev-server to prove that.
        + Change 
    SOURCE MAPS: tell you the actual file a style or script came from, INSTEAD of the bundled version of the styles.
    BUNDLES can be recreated by simply running the build.

Production Web Server with Express: 
    - We currently do not need the excess features (such as live-reload) that live-server etc has. This takes up resources
    - We need to create one file in a 'server' folder with about 15 lines of code
        + This will serve up our public folder.
    - Install express and start by requiring the packages at the top of the file.
    - This middleware will run for each request to server that serves up assets based off request from directory.

    Call app.use, and app.listen to specify port and callback function.
    You will run prod build again to rebuild the assets we previously deleted. and then run node server/server.js again.
    So we create an express application, then we tell it to use the public directory to serve up our assets.
        We also create a fallback so that if there isn't a file for a route visited, it falls back to index.html to be served.
        Last, we tell it where to listen to with the port.

Pushing to Heroku
    - Login from the command line: 'heroku login'
    - 'heroku create [project name]'
        + This creates another remote git repo. If you run git remote, you'll see that.
    - We need to now teach heroku to start up our node server
        + You must specify a start script within the package.json so that it knows how to start up the node server.
        + Then, currently, it's listening to a static port (3000). We need to know how to respond to a Heroku provided environment variable.
            port = process.env.PORT || 3000
    - Lastly, we need to know how to run webpack from Heroku so that it sees assets.
        + First, add the four generated files to .gitignore (bundles, and styles in public folder)
        "heroku-postbuild": "npm run build:prod"
        TO package.json scripts.
        Then push to heroku master

Optimization:
    - Dependencies you don't need in production should go under devDependencies.
        + Do this by npm install --dev when installing a dependency.
    - You can delete your node_modules folder and npm install --production, and it will only install the ones not under devDependencies.
    - Use a 'dist' folder within the public folder to make webpack dump the styles and bundle files it creates in there.

New Feature Workflow:
    - We installed the numeral npm package and ensured that the date and amounts were formatted correctly.
    
Firebase: 
    - Built on NoSQL, is essentially a JS object.
    - firebase.google.com for new DB, change auth rules to true so that you don't have to be logged in at first to CRUD.
    - npm install --save firebase@4.2.0
    - Create a Firebase folder and file within the src folder. The goal is to connect to firebase within this file, and any time we need access     then we can just import the file.
    - Firebase has authentication, file features, 
    - firebase.initializeApp(dbConfig)
        firebase.database().ref().set({
            name: 'Josh Wood'
        })
        + ref() is a reference to which subset of the database you want to access. If no arg is given, then the root of the db is defaulted.
            + You can also create a new one in the same way.
        + set() sets the value(s). It does not have to take an object, rather in can take any normal data type, but it will wipe the data in the db at that point.